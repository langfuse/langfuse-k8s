---
# Source: langfuse/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: langfuse-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: langfuse
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.7
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: langfuse
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: langfuse/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: langfuse-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: langfuse
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.7
automountServiceAccountToken: false
---
# Source: langfuse/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: langfuse
  labels:
    helm.sh/chart: langfuse-0.1.0
    app.kubernetes.io/name: langfuse
    app.kubernetes.io/instance: langfuse
    app.kubernetes.io/version: "2"
    app.kubernetes.io/managed-by: Helm
---
# Source: langfuse/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: langfuse-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: langfuse
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.7
type: Opaque
data:
  postgres-password: "cG9zdGdyZXM="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: langfuse/templates/nextauth-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: langfuse-nextauth
  labels:
    helm.sh/chart: langfuse-0.1.0
    app.kubernetes.io/name: langfuse
    app.kubernetes.io/instance: langfuse
    app.kubernetes.io/version: "2"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  nextauth-secret: Y2hhbmdlbWU=
---
# Source: langfuse/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: langfuse-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: langfuse
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.7
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: langfuse
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: langfuse/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: langfuse-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: langfuse
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.7
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: langfuse
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: langfuse/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: langfuse
  labels:
    helm.sh/chart: langfuse-0.1.0
    app.kubernetes.io/name: langfuse
    app.kubernetes.io/instance: langfuse
    app.kubernetes.io/version: "2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: langfuse
    app.kubernetes.io/instance: langfuse
---
# Source: langfuse/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: langfuse
  labels:
    helm.sh/chart: langfuse-0.1.0
    app.kubernetes.io/name: langfuse
    app.kubernetes.io/instance: langfuse
    app.kubernetes.io/version: "2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: langfuse
      app.kubernetes.io/instance: langfuse
  template:
    metadata:
      labels:
        app.kubernetes.io/name: langfuse
        app.kubernetes.io/instance: langfuse
    spec:
      serviceAccountName: langfuse
      securityContext:
        {}
      containers:
        - name: langfuse
          securityContext:
            {}
          image: "ghcr.io/langfuse/langfuse:2"
          imagePullPolicy: IfNotPresent
          env:
            - name: NODE_ENV
              value: "production"
            - name: DATABASE_USERNAME
              value: "postgres"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: langfuse-postgresql
                  key: postgres-password
            - name: DATABASE_HOST
              value: "langfuse-postgresql"
            - name: DATABASE_NAME
              value: "postgres_langfuse"
            - name: NEXTAUTH_URL
              value: "http://localhost:3000"
            - name: NEXTAUTH_SECRET
              valueFrom:
                secretKeyRef:
                  name: langfuse-nextauth
                  key: nextauth-secret
            - name: SALT
              value: "changeme"
            - name: TELEMETRY_ENABLED
              value: "true"
            - name: NEXT_PUBLIC_SIGN_UP_DISABLED
              value: "false"
            - name: ENABLE_EXPERIMENTAL_FEATURES
              value: "false"
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
---
# Source: langfuse/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: langfuse-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: langfuse
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.7
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: langfuse-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: langfuse
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: langfuse-postgresql
      labels:
        app.kubernetes.io/instance: langfuse
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.2.0
        helm.sh/chart: postgresql-15.2.7
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: langfuse-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: langfuse
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.2.0-debian-12-r17
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: langfuse-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "postgres_langfuse"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=postgres_langfuse" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=postgres_langfuse" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
